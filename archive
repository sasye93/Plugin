reporter.warning(null, "ASSIGN: " + a + ":" + b+
        "ASSIGN2: " + a.tpe + ":" + b.tpe+
        "ASSIGN4: " +  (if(b != null && b.symbol != null && b.symbol.typeSignature != null) b.symbol.typeSignature.toString else null)
        + "ASSIGN5: " +  (if(as != null && as.symbol != null && as.symbol.enclClassChain != null) as.symbol.enclClassChain.toString else null)
        + "ASSIGN6: " +  a.symbol.enclosingTopLevelClass.toString // <-
        + "ASSIGN6a: " +  (if(as.symbol != null && as.symbol.enclClass != null) as.symbol.enclClass.toString else null)
        + "ASSIGN6b: " +  (if(as.symbol != null && as.symbol.classBound != null) as.symbol.classBound.toString else null)
        + "aIGN7: " +  (if(a != null && a.symbol != null) a.symbol.isOverride.toString else null)
          + "aIGN7A: " + (if(a != null && a.symbol != null) a.symbol.isOverridingSymbol else null)
          + "aIGN8: " + (if(a != null && a.symbol != null) a.symbol.overrides.toString else null))


        reporter.warning(null, "Method def: " + showRaw(a) + ": " + a.symbol + " : "+enclosingClass.baseClasses.map(_.tpe).toString + ":" + (if(a.symbol != null && a.symbol.logicallyEnclosingMember != null) a.symbol.logicallyEnclosingMember.toString else null)
          + (if(a.symbol != null && a.symbol.safeOwner != null) a.symbol.safeOwner.toString else null)
          + (if(a.symbol != null && a.symbol.owner != null) a.symbol.owner.toString else null)
          + (if(a.symbol != null && a.symbol.effectiveOwner != null) a.symbol.effectiveOwner.toString else null)
          + (if(a.symbol != null && a.symbol.originalOwner != null) a.symbol.originalOwner.toString else null)
          + a.symbol.isOverridingSymbol + ":" + a.symbol.isValue + ":" + a.symbol.isAnyOverride + ":" + a.symbol.asTerm.overrides.toString + ":" + a.symbol.asTerm.allOverriddenSymbols.toString + a.symbol.asTerm.isOverride
          + (if (a.tpe != null) a.tpe.toString else null)
          + (if (a.symbol != null && a.symbol.tpe != null) a.symbol.tpe.toString else null))


          val ru = scala.reflect.runtime.universe
                      val m = ru.runtimeMirror(typeOf[loci.container.ContainerEntryPoint].getClass.getClassLoader)
                      val aqSymbol = m.classSymbol(c.symbol.tpe.typeSymbol.getClass)
                      val instMirr = m.reflect(c.symbol.toType.typeSymbol.asClass.getClass)

                      reporter.warning(null, "xxxxxxxxxxxxxxxxxxxx3133" + c.symbol.tpe.getClass
                      + "3134" + c.symbol.toType.getClass
                      + "3135" + c.symbol.tpe.getClass
                      + "3136" + c.symbol.getClass
                      + "3137" + c.getClass
                      + "3138" + c.tpe
                      + "3139" + c.symbol.tpe
                      + "3130" + c.symbol.tpe.getClass
                      + "3131" + c.symbol.asType
                      + "3131" + c.symbol.asType.getClass
                      + "3131" + c.symbol.toType
                      + "3131" + c.symbol.asType.asClass.getClass
                      + "3131" + c.symbol.toType.getClass)
                      reporter.warning(null, "xxxxxxxxxxxxxxxxxxxx" + showRaw(c.symbol.asType.info.decls))
                      reporter.warning(null, "xxxxxxxxxxxxxxxxxxxx" + showRaw(c.symbol.asType.info.decls.find(x => x.nameString == "containerPort").get))
                      reporter.warning(null, "xxxxxxxxxxxxxxxxxxxx3" + instMirr.getClass)
                      reporter.warning(null, "xxxxxxxxxxxxxxxxxxxx4" + instMirr.symbol.asClass)
                      reporter.warning(null, "xxxxxxxxxxxxxxxxxxxx3" + instMirr.symbol.info.decls.toString())
                      //reporter.warning(null, "xxxxxxxxxxxxxxxxxxxx13" + d.baseClasses.find(t => t.asClass.fullName == "loci.container.ContainerEntryPoint").get)
                      reporter.warning(null, "xxxxxxxxxxxxxxxxxxxx42" + instMirr.symbol.info.members.toString())

                      val q = aqSymbol.info.decls.find(m => m.isMethod && m.name.toString == "containerPort").orNull
                      if(q != null){
                                    val met = instMirr.reflectMethod(q.asMethod)

                                    reporter.warning(null, "decls of peer : " + c.tpe.decls.map(x => x.toString + " ; "))
                                    reporter.warning(null, "decls of peer sy : " + c.symbol.tpe.decls.map(x => x.toString + " ; "))
                                    reporter.warning(null, "ENTRY P CODE : " + met())
                                  }