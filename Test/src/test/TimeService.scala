package testimport java.text.SimpleDateFormatimport java.util.{Calendar, Date}import loci._import loci.communicator.tcp._import rescala._@multitierobject TimeService {  val time = placed[Server] {    Var(0l)  }  trait Server extends Peer {    type Tie <: Multiple[Client]  }  trait Client extends Peer {    type Tie <: Single[Server]  }  placed[Server].main {    while (true) {      time set Calendar.getInstance.getTimeInMillis      Thread sleep 1000    }  }  placed[Client].main {    val format = new SimpleDateFormat("h:m:s")    val display = Signal {      format format new Date(time.asLocal())    }    display.changed observe println  }}import loci.contexts.Pooled.Implicits.globalobject Server extends App {  multitier setup new TimeService.Server {    def connect = listen[TimeService.Client] {      TCP(43053)    }  }}object Client extends App {  (multitier setup new TimeService.Client {    def connect = connect[TimeService.Server] {      TCP("0.0.0.0", 43053)    }  }).terminated.foreach({ x => println(x) })}